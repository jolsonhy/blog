<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习笔记 on Jiegao</title>
    <link>https://hestation.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 学习笔记 on Jiegao</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Jun 2016 14:23:41 +0000</lastBuildDate>
    
	<atom:link href="https://hestation.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>React学习笔记</title>
      <link>https://hestation.com/2016/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 11 Jun 2016 14:23:41 +0000</pubDate>
      
      <guid>https://hestation.com/2016/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>前言 前段时间看了一下React和react-router的文档，这几天用它们在做一个实时投票的Web App，这篇文章记录里面遇到的坑及其解决方法。
获取真实DOM节点的引用 添加ref属性
ref={(ref) =&amp;gt; this.name = ref}  Demo:
export default class Join extends React.Component { constructor(props) { super(props); this.handleSubmit = (e) =&amp;gt; { e.preventDefault(); let memberName = this.name.value; console.log(&amp;quot;TODO: Join member &amp;quot; + memberName); } } render() { return ( &amp;lt;form onSubmit={this.handleSubmit}&amp;gt; &amp;lt;label&amp;gt;Full Name&amp;lt;/label&amp;gt; &amp;lt;input ref={(ref) =&amp;gt; this.name = ref} className=&amp;quot;form-control&amp;quot; placeholder=&amp;quot;Enter your full name...&amp;quot; required /&amp;gt; &amp;lt;button className=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Join&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; ); } }  使用React-Router时父组件向子组件传递props 原本渲染所有路由组件的写法为：</description>
    </item>
    
    <item>
      <title>Webpack--令人困惑的地方</title>
      <link>https://hestation.com/2016/webpack-%E4%BB%A4%E4%BA%BA%E5%9B%B0%E6%83%91%E7%9A%84%E5%9C%B0%E6%96%B9/</link>
      <pubDate>Mon, 16 May 2016 09:15:00 +0000</pubDate>
      
      <guid>https://hestation.com/2016/webpack-%E4%BB%A4%E4%BA%BA%E5%9B%B0%E6%83%91%E7%9A%84%E5%9C%B0%E6%96%B9/</guid>
      <description>原文  Webpack—The Confusing Parts 【翻译】Webpack——令人困惑的地方  Webpack是目前基于React和Redux开发的应用的主要打包工具。我想使用Angular 2或其他框架开发的应用也有很多在使用Webpack。
当我第一次看到Webpack的配置文件时，它看起来非常的陌生，我非常的疑惑。经过一段时间的尝试之后我认为这是因为Webpack只是使用了比较特别的语法和引入了新的原理，因此会让使用者感到疑惑。这些也是导致Webpack不被人熟悉的原因。
因为刚开始使用Webpack很让人疑惑，我觉得有必要写几篇介绍Webpack的功能和特性的文章以帮助初学者快速理解。此文是最开始的一篇。
Webpack的核心原理 Webpack的两个最核心的原理分别是：
 一切皆模块 正如js文件可以是一个“模块（module）”一样，其他的（如css、image或html）文件也可视作模 块。因此，你可以require(&#39;myJSfile.js&#39;)亦可以require(&#39;myCSSfile.css&#39;)。这意味着我们可以将事物（业务）分割成更小的易于管理的片段，从而达到重复利用等的目的。
 按需加载 传统的模块打包工具（module bundlers）最终将所有的模块编译生成一个庞大的bundle.js文件。但是在真实的app里边，“bundle.js”文件可能有10M到15M之大可能会导致应用一直处于加载中状态。因此Webpack使用许多特性来分割代码然后生成多个“bundle”文件，而且异步加载部分代码以实现按需加载。
  好了，下面来看看那些令人困惑的部分吧。
1.开发模式和生产模式 首先要知道的是Webpack有许许多多的特性，一些是”开发模式“下才有的，一些是”生产模式“下才有的，还有一些是两种模式下都有的。
 通常使用到Webpack如此多特性的项目都会有两个比较大的Webpack配置文件
 为了生成bundles文件你可能在package.json文件加入如下的scripts项：
&amp;quot;scripts&amp;quot;: { // 运行npm run build 来编译生成生产模式下的bundles &amp;quot;build&amp;quot;: &amp;quot;webpack --config webpack.config.prod.js&amp;quot;, // 运行npm run dev来生成开发模式下的bundles以及启动本地server &amp;quot;dev&amp;quot;: &amp;quot;webpack-dev-server&amp;quot; }  2.webpack CLI 和webpack-dev-server 值得注意的是，Webpack作为模块打包工具，提供两种用户交互接口：
 Webpack CLI tool：默认的交互方式（已随Webpack本身安装到本地）
 webpack-dev-server：一个Node.js服务器（需要开发者从npm自行安装）
  Webpack CLI（有利于生产模式下打包） 这种方式可以从命令行获取参数也可以从配置文件（默认叫webpack.config.js）获取，将获取到的参数传入Webpack来打包。
 当然你也可以从命令行（CLI）开始学习Webpack，以后你可能主要在生产模式下使用到它。
 用法：
方式1: // 全局模式安装webpack npm install webpack --g // 在终端输入 $ webpack // &amp;lt;--使用webpack.</description>
    </item>
    
    <item>
      <title>npm学习笔记</title>
      <link>https://hestation.com/2016/npm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 16 May 2016 08:59:00 +0000</pubDate>
      
      <guid>https://hestation.com/2016/npm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>前言 近期在做一个投票项目的应用时，突然发现对npm的认识很少，故查询了一些资料，现将自己的笔记总结在此。
介绍 npm是Node.js的包管理工具
命令  查看用户手册
npm -h   生成package.json bash npm init    &amp;ndash;save-dev与&amp;ndash;save的区别  npm install module-name --save-dev // 把模块和版本号添加到dependencies部分 npm install module-name --save // 把模块和版本号添加到devDependencies部分  devDependencies下列出的模块，是我们开发时用的，比如grunt-contrib-uglify，我们用它混淆js文件，它们不会被部署到生产环境。dependencies下的模块，则是我们生产环境中需要的依赖。</description>
    </item>
    
    <item>
      <title>前端学习笔记</title>
      <link>https://hestation.com/2016/xiachufang/</link>
      <pubDate>Wed, 13 Apr 2016 22:42:28 +0000</pubDate>
      
      <guid>https://hestation.com/2016/xiachufang/</guid>
      <description>问题一：外容器的尺寸未知,内容器已知，实现水平垂直居中 html结构: &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;  方法一：绝对定位 + 负外边距 .container { position: relative; } .item { width: 200px; height: 200px; position: absolute; top: 50%; left: 50%; margin: -100px 0 0 -100px; }  方法二：绝对定位 + 四周偏移量定位0， 外边距为auto .container { position: relative; } .item { width: 200px; height: 200px; position: absolute; margin: auto; top: 0; bottom: 0; left: 0; right: 0; }  方法三：Flex定位 .container { display: flex; justify-content: center; align-items: center; } .</description>
    </item>
    
    <item>
      <title>图解HTTP学习笔记</title>
      <link>https://hestation.com/2015/http-learning/</link>
      <pubDate>Sat, 17 Oct 2015 15:44:12 +0000</pubDate>
      
      <guid>https://hestation.com/2015/http-learning/</guid>
      <description>参考资料： 经典的Web应用网络模型
在地址栏中输入某个网址，简要讲下整个页面呈现的过程? 客户端  用户想浏览 http://www.chen9.info 页面，浏览器需要通过DNS找到对应域名下的IP地址：10X.XXX.XXX.XXX 。
 HTTP协议的职责：生成针对目标Web服务器的HTTP请求报文 —— “请给我http://www.chen9.info 页面资源”。
 TCP协议的职责：经过三次握手，建立双方之间的连接。为了方便通信，将HTTP请求报文分割成报文段，按序号分为多个报文段，把每个报文段可靠地传送给对方。
  一般来说，浏览器会先询问本地DNS缓存，如果没有记录过这个域名的映射IP，那就向本地的DNS网关询问，如果网关也不知道，就继续向上一层的DNS服务器询问，直到拿到这个IP地址。
服务端  IP协议的职责：从对方那里接收到的报文段，重组到达的报文段，按序号以原来的顺序重组请求的报文。
 HTTP协议的职责：对Web服务器请求的内容的处理 —— “是想要地址为10X.XXX.XXX.XXX的计算机上的资源啊”
 请求的处理结果也同样利用TCP/IP通信协议项用户进行回传。通过四次握手，确认连接断开，终止通信。
    一般来说，一台服务器处理的请求是有限的，因此大型的应用都会有多台proxy机器，我们可以让DNS服务器在第一个请求返回IP1，第二个请求返回IP2…这样用户的请求就会均匀的落在这些机器上，这个就是DNS负载均衡。
 CDN就是通过智能DNS算出离用户最近的CDN节点的IP地址，这样用户可以访问一台离他最近的机器，大大节约连接时间。
 一般来说，浏览器跟真正提供Web服务器的机器是没有直接连接的，他们中间会有代理跟反向代理。
 代理服务器的作用是所有内部的网络请求都是通过代理去连接对方的服务器，可以在代理服务器这里做恶意请求/相应的拦截，还可以缓存内部网络所需的公共资源。
 反向代理就是以代理服务器来接受网络连接请求，Proxy机器指的就是反向代理机器，Proxy机器收到请求后会经过一定的分析最后把请求内容转发给内网对应的Web服务器，Web服务器的HTTP响应包会先到Proxy机器，然后再到用户机器。这样可以负载平衡、拦截恶意请求、维持长连接。
   返回结果的HTTP状态码 HTTP状态码负责表示客户端HTTP请求的返回结果、标记服务器端的处理是否正常、通知出现的错误等工作。
状态码的类别  1XX： Information (信息性状态码) —— 接收的请求正在处理
 2XX： Success (成功状态码) —— 请求正常处理完毕 &amp;gt; 200 OK 表示从客户端发来的请求在服务器端被正常处理了。 &amp;gt; &amp;gt; 204 No Content 代表服务器接收到请求已处理成功，但在返回的响应报文中不含实体的主体部分。即浏览器显示的页面不发生更新。</description>
    </item>
    
  </channel>
</rss>