<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog on Jiegao</title>
    <link>https://oeate.com/tags/blog/</link>
    <description>Recent content in blog on Jiegao</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Jul 2019 10:47:06 +0800</lastBuildDate>
    
	<atom:link href="https://oeate.com/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hello, Hugo</title>
      <link>https://oeate.com/2019/hugo/</link>
      <pubDate>Wed, 17 Jul 2019 10:47:06 +0800</pubDate>
      
      <guid>https://oeate.com/2019/hugo/</guid>
      <description>前言 记得是 16 年还在学校的时候开始折腾博客这个东西，而当时就觉得市面上所有现成的博客系统都做得不大好，要么太丑，要么太重。所以从一开始就走上了自建这么一条不归路，从买服务器，买域名，到接触不同的 Linux 系统，折腾过程中踩了很多坑，但也因此学会了很多东西。如今工作之后，由于没有继续干开发的工作，也很少花时间在这上面了，而以前写的一些东西也因此丢了，心里还是有点难过的。前两天突然心血来潮，觉着这种方式相比朋友圈、微博 Twitter 等东西，更能将过去的一些经验、日常沉淀下来，日后来看，说不定别有另一番滋味，于是，开搞。
记得之前最后一个版本的博客是基于 Hexo 搞的，整体来讲还是不错的，不过记忆中那一堆 Nodejs 的依赖，各种乱七八糟的小问题，折腾了好久，再加上确实当内容多起来之后，每次编译生成的速度会比较慢，所以想着换一个试试，网上搜了一大圈，不少人都推荐 Hugo，于是做了下尝试，确实不错，暂时就用它了。以下是重新用它搭建的整体流程记录。
本地安装 整个流程如下： 安装 Hugo -&amp;gt; 新建站点 -&amp;gt; 选择并拷贝主题到 themes 目录 -&amp;gt; 修改站点配置文件 -&amp;gt; 本地测试运行 -&amp;gt; 完成
整个站点各个目录的作用：  archetypes：给不同的类型定义默认FrontMatter， content：源文件，相当于 hexo 的 source 目录 data：数据文件，一般用不上 layouts：模板 static：静态资源，也就是不需要Hugo处理的静态资源，比如图片等 themes：第三方主题，将第三方主题拷贝到这个文件夹下即可使用  参考资料：  Hugo Documentation Hugo LeaveIt  部署上线 这里还是选择了部署在 Github Pages 上，因为方便且能很好地管理源文件。
本地测试确认没问题后，直接在站点目录下输入命令 hugo 即可编译，然后将所有内容 push 到 GitHub 上即可。
由于 Hugo 提供了另一种方式来管理源代码与站点文件，即在配置文件 config.yoml 中加一条 publishDir = &amp;quot;docs&amp;quot; 的选项，便可把所有编译生成的站点文件放在docs文件夹里，而 GitHub 能在设置中手动将 Pages 的目录选为 docs，这样便能达成一次 push，同时保存源代码与站点文件的结果，我很喜欢。</description>
    </item>
    
    <item>
      <title>多设备使用 Hexo 写博客的解决方案</title>
      <link>https://oeate.com/2019/hexo-multi-devices/</link>
      <pubDate>Sun, 16 Jun 2019 15:39:47 +0800</pubDate>
      
      <guid>https://oeate.com/2019/hexo-multi-devices/</guid>
      <description>最近弄了一台 XPS 13，但同时原来的 MacBook Pro也在使用，就涉及到两台设备需要同时使用 Hexo 编辑、上传 Blog 文件的问题，所以想到把源文件放到服务器上，以下解决方案的记录。
了解 Hexo 机制 首先，要搞清楚使用 Hexo 搭建博客的基本机制，本地 git clone 自 Hexo 的并非我们要部署的文件，而通过 hexo d 上传部署到 GitHub 的其实是它编译之后的文件，基本就是一个纯静态的 html + css + js 页面，不包括源文件，实际体现在我们本地就是 .deploy_git 这个文件夹里的。
了解其机制之后就好办了，一般情况通过 GitHub 作为中转站有两种方式，一种是在你 name.github.io 基础上直接新建一个 hexo 分支，并将它设置为默认分支，这样每次先将源文件推到 hexo 默认分支上，再编译部署实际内容到 master 分支，从而实现一个仓库同时管理源文件与博客文件。
不过我比较喜欢单独建一个私有仓库来存储这些内容，以下是我的步骤：
新建仓库存储源文件 1、先定义原博客文件夹目录为 blog，blog 下新建一个 .gitignore，将一些不需要上传保存的内容忽略掉：
.DS_Store Thumbs.db db.json *.log node_modules/ public/ .deploy*/  2、Github 新建一个用于保存源文件的仓库，这里设置为 blog_backup（不需要添加 README 文件，直接空白的），然后将本地与远程仓库关联，并推上去。
git init git commit -m “first commit” git remote add origin git@github.</description>
    </item>
    
  </channel>
</rss>